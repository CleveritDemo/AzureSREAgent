name: Deploy Infrastructure and Applications

on:
  push:
    branches: [ main ]
    paths:
      - 'terraform-export-clean/**'
      - 'src/**'
      - '.github/workflows/deploy-infrastructure.yml'
  pull_request:
    branches: [ main ]
    paths:
      - 'terraform-export-clean/**'
      - 'src/**'
  workflow_dispatch:
    inputs:
      action:
        description: 'Action to perform'
        required: true
        default: 'plan'
        type: choice
        options:
        - plan
        - apply
        - destroy
      confirm_action:
        description: 'Confirm action (type "yes" to proceed with apply/destroy)'
        required: false
        type: string

# Permisos necesarios para OIDC
permissions:
  id-token: write
  contents: read

env:
  TF_VERSION: '1.5.7'
  WORKING_DIRECTORY: 'terraform-export-clean'
  ENVIRONMENT: 'development'
  # Azure authentication for Terraform (OIDC)
  ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
  ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
  ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
  ARM_USE_OIDC: true
  ARM_USE_CLI: false

jobs:
  deploy:
    name: Deploy to Azure
    runs-on: ubuntu-latest
    environment: dev
    
    permissions:
      id-token: write
      contents: read

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Azure Login
      uses: azure/login@v1
      with:
        client-id: ${{ secrets.AZURE_CLIENT_ID }}
        tenant-id: ${{ secrets.AZURE_TENANT_ID }}
        subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TF_VERSION }}

    - name: 'Debug Azure Secrets'
      run: |
        echo "🔍 Debugging Azure secrets for OIDC..."
        echo "=================================="
        
        echo "AZURE_CLIENT_ID:"
        if [ -z "$AZURE_CLIENT_ID" ]; then
          echo "  ❌ EMPTY or not set"
        else
          echo "  ✅ SET - Length: ${#AZURE_CLIENT_ID} chars"
          echo "  ✅ Value: $AZURE_CLIENT_ID"
        fi
        
        echo ""
        echo "AZURE_TENANT_ID:"
        if [ -z "$AZURE_TENANT_ID" ]; then
          echo "  ❌ EMPTY or not set"
        else
          echo "  ✅ SET - Length: ${#AZURE_TENANT_ID} chars"  
          echo "  ✅ Value: $AZURE_TENANT_ID"
        fi
        
        echo ""
        echo "AZURE_SUBSCRIPTION_ID:"
        if [ -z "$AZURE_SUBSCRIPTION_ID" ]; then
          echo "  ❌ EMPTY or not set"
        else
          echo "  ✅ SET - Length: ${#AZURE_SUBSCRIPTION_ID} chars"
          echo "  ✅ Value: $AZURE_SUBSCRIPTION_ID"
        fi
        
        echo ""
        echo "🔐 OIDC Authentication Method:"
        echo "  ✅ Using OIDC (no client secret needed)"
        echo "  ✅ ARM_USE_OIDC: true"
        echo "  ✅ ARM_USE_CLI: false"
      env:
        AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
        AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
        AZURE_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

    - name: 'Azure Login with OIDC'
      uses: azure/login@v2
      with:
        client-id: ${{ secrets.AZURE_CLIENT_ID }}
        tenant-id: ${{ secrets.AZURE_TENANT_ID }}
        subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

    - name: Verify Authentication Method
      run: |
        echo "🔍 Verifying authentication setup..."
        echo "✅ Azure login completed successfully"
        
        # Verificar que podemos acceder a Azure
        az account show --output table

    - name: 'Check Available Configuration Files'
      run: |
        echo "📁 Checking available configuration files..."
        echo "Current directory: $(pwd)"
        echo ""
        echo "Available .tfvars files:"
        find . -name "*.tfvars" -type f || echo "No .tfvars files found"
        echo ""
        echo "Available .conf files:"
        find . -name "*.conf" -type f || echo "No .conf files found"
        echo ""
        echo "All files in current directory:"
        ls -la

    - name: Terraform Format Check
      id: fmt
      run: |
        echo "🖌️ Checking Terraform format..."
        if terraform fmt -check -recursive; then
          echo "✅ All files are properly formatted"
        else
          echo "⚠️ Some files need formatting, auto-fixing..."
          terraform fmt -recursive
          echo "✅ Files formatted successfully"
        fi
      continue-on-error: false

    - name: Terraform Init
      working-directory: ${{ env.TERRAFORM_WORKING_DIR }}
      run: terraform init

    - name: Terraform Plan
      working-directory: ${{ env.TERRAFORM_WORKING_DIR }}
      run: terraform plan -out=tfplan

    - name: Terraform Apply
      if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      working-directory: ${{ env.TERRAFORM_WORKING_DIR }}
      run: terraform apply -auto-approve tfplan

    - name: Get ACR Login Server
      id: acr-info
      run: |
        ACR_NAME=$(az acr list --resource-group eShopCleverRG --query '[0].name' -o tsv)
        ACR_LOGIN_SERVER=$(az acr list --resource-group eShopCleverRG --query '[0].loginServer' -o tsv)
        echo "acr_name=$ACR_NAME" >> $GITHUB_OUTPUT
        echo "acr_login_server=$ACR_LOGIN_SERVER" >> $GITHUB_OUTPUT

    - name: Login to Azure Container Registry
      run: |
        az acr login --name ${{ steps.acr-info.outputs.acr_name }}

    - name: Build and Push Docker Images
      if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      run: |
        # Build and push WebMVC image
        if [ -d "./src/Web" ]; then
          docker build -t ${{ steps.acr-info.outputs.acr_login_server }}/eshop-webmvc:${{ github.sha }} ./src/Web
          docker push ${{ steps.acr-info.outputs.acr_login_server }}/eshop-webmvc:${{ github.sha }}
        fi
        
        # Build and push PublicApi image  
        if [ -d "./src/PublicApi" ]; then
          docker build -t ${{ steps.acr-info.outputs.acr_login_server }}/eshop-publicapi:${{ github.sha }} ./src/PublicApi
          docker push ${{ steps.acr-info.outputs.acr_login_server }}/eshop-publicapi:${{ github.sha }}
        fi

    - name: Deploy to AKS
      if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      run: |
        # Get AKS credentials
        az aks get-credentials --resource-group eShopCleverRG --name eshopcleveraks --overwrite-existing
        
        # Apply Kubernetes manifests if they exist
        if [ -d "./k8s" ]; then
          kubectl apply -f ./k8s/
        fi
