name: 'Terraform Infrastructure Management - DEV'

on:
  workflow_dispatch:
    inputs:
      action:
        description: 'Action to perform'
        required: true
        default: 'plan'
        type: choice
        options:
        - plan
        - apply
        - destroy
      confirm_action:
        description: 'Confirm action (type "yes" to proceed with apply/destroy)'
        required: false
        type: string

# Permisos necesarios para OIDC
permissions:
  id-token: write
  contents: read

env:
  TF_VERSION: '1.5.7'
  WORKING_DIRECTORY: 'terraform-export-clean'
  ENVIRONMENT: 'development'

jobs:
  terraform:
    name: 'Terraform DEV'
    runs-on: ubuntu-latest
    
    defaults:
      run:
        shell: bash
        working-directory: ${{ env.WORKING_DIRECTORY }}

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TF_VERSION }}

    - name: 'Debug Azure Secrets'
      run: |
        echo "üîç Debugging Azure secrets..."
        echo "=================================="
        
        # Mostrar informaci√≥n detallada de cada secret
        echo "AZURE_CLIENT_ID:"
        if [ -z "$AZURE_CLIENT_ID" ]; then
          echo "  ‚ùå EMPTY or not set"
        else
          echo "  ‚úÖ SET - Length: ${#AZURE_CLIENT_ID} chars"
          echo "  ‚úÖ Value: $AZURE_CLIENT_ID"
        fi
        
        echo ""
        echo "AZURE_TENANT_ID:"
        if [ -z "$AZURE_TENANT_ID" ]; then
          echo "  ‚ùå EMPTY or not set"
        else
          echo "  ‚úÖ SET - Length: ${#AZURE_TENANT_ID} chars"  
          echo "  ‚úÖ Value: $AZURE_TENANT_ID"
        fi
        
        echo ""
        echo "AZURE_SUBSCRIPTION_ID:"
        if [ -z "$AZURE_SUBSCRIPTION_ID" ]; then
          echo "  ‚ùå EMPTY or not set"
        else
          echo "  ‚úÖ SET - Length: ${#AZURE_SUBSCRIPTION_ID} chars"
          echo "  ‚úÖ Value: $AZURE_SUBSCRIPTION_ID"
        fi
        
        echo ""
        echo "AZURE_CREDENTIALS:"
        if [ -z "$AZURE_CREDENTIALS" ]; then
          echo "  ‚ùå EMPTY or not set"
        else
          echo "  ‚úÖ SET - Length: ${#AZURE_CREDENTIALS} chars"
          echo "  ‚úÖ First 50 chars: ${AZURE_CREDENTIALS:0:50}..."
          # Intentar validar si es JSON v√°lido
          if echo "$AZURE_CREDENTIALS" | jq . > /dev/null 2>&1; then
            echo "  ‚úÖ Valid JSON format"
            echo "  ‚úÖ clientId: $(echo "$AZURE_CREDENTIALS" | jq -r '.clientId // "missing"')"
            echo "  ‚úÖ tenantId: $(echo "$AZURE_CREDENTIALS" | jq -r '.tenantId // "missing"')"
          else
            echo "  ‚ùå Invalid JSON format"
          fi
        fi
      env:
        AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
        AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
        AZURE_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
        AZURE_CREDENTIALS: ${{ secrets.AZURE_CREDENTIALS }}

    - name: 'Try Login with AZURE_CREDENTIALS (if available)'
      if: ${{ secrets.AZURE_CREDENTIALS != '' }}
      uses: azure/login@v2
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}
        
    - name: 'Try Login with Individual Secrets (if CREDENTIALS failed)'
      if: ${{ secrets.AZURE_CREDENTIALS == '' && secrets.AZURE_CLIENT_ID != '' }}
      uses: azure/login@v2
      with:
        client-id: ${{ secrets.AZURE_CLIENT_ID }}
        tenant-id: ${{ secrets.AZURE_TENANT_ID }}
        subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
        
    - name: 'Manual Service Principal Login (last resort)'
      if: ${{ secrets.AZURE_CREDENTIALS == '' && secrets.AZURE_CLIENT_ID == '' }}
      run: |
        echo "‚ùå No valid authentication method found"
        echo ""
        echo "üìã To fix this, you need to set ONE of these options:"
        echo ""
        echo "OPTION 1 - Individual Secrets:"
        echo "  AZURE_CLIENT_ID = your-service-principal-app-id"
        echo "  AZURE_TENANT_ID = your-azure-tenant-id"  
        echo "  AZURE_SUBSCRIPTION_ID = your-subscription-id"
        echo ""
        echo "OPTION 2 - JSON Credentials:"
        echo '  AZURE_CREDENTIALS = {"clientId":"...","clientSecret":"...","tenantId":"...","subscriptionId":"..."}'
        echo ""
        echo "‚ùì Check your GitHub repo Settings > Secrets and variables > Actions"
        exit 1

    - name: Verify Authentication Method
      run: |
        echo "üîç Verifying authentication setup..."
        echo "Using AZURE_CREDENTIALS for authentication"
        
        # Verificar que podemos acceder a Azure
        az account show --output table
      env:
        # No necesitamos estas variables para el m√©todo de credentials
        ARM_USE_OIDC: false
        ARM_USE_CLI: true

    - name: Terraform Format Check
      id: fmt
      run: terraform fmt -check -recursive
      continue-on-error: true

    - name: Terraform Init
      id: init
      run: |
        echo "üöÄ Initializing Terraform..."
        terraform init
      env:
        ARM_USE_CLI: true

    - name: Terraform Validate
      id: validate
      run: |
        echo "‚úÖ Validating Terraform configuration..."
        terraform validate

    - name: Terraform Plan
      id: plan
      run: |
        echo "üìã Creating Terraform execution plan..."
        terraform plan -var-file="development.tfvars" -no-color
      env:
        ARM_USE_CLI: true
      continue-on-error: false

    - name: Update Pull Request
      uses: actions/github-script@v7
      if: false  # Disabled since we only use manual triggers
      env:
        PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
          #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
          #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
          <details><summary>Validation Output</summary>
          
          \`\`\`\n
          ${{ steps.validate.outputs.stdout }}
          \`\`\`
          
          </details>
          
          #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`
          
          <details><summary>Show Plan</summary>
          
          \`\`\`terraform\n
          ${process.env.PLAN}
          \`\`\`
          
          </details>
          
          *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Working Directory: \`${{ env.WORKING_DIRECTORY }}\`, Workflow: \`${{ github.workflow }}\`*`;
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: output
          })

    - name: Safety Check for Apply/Destroy
      if: github.event.inputs.action == 'apply' || github.event.inputs.action == 'destroy'
      run: |
        echo "‚ö†Ô∏è SAFETY CHECK BEFORE ${{ github.event.inputs.action }}"
        echo "Environment: DEVELOPMENT"
        echo "Action requested: ${{ github.event.inputs.action }}"
        echo "Confirmation: ${{ github.event.inputs.confirm_action }}"
        
        if [ "${{ github.event.inputs.confirm_action }}" != "yes" ]; then
          echo "‚ùå ${{ github.event.inputs.action }} action requires confirmation."
          echo "   Please set 'confirm_action' to 'yes' to proceed"
          exit 1
        fi
        
        echo "‚úÖ Safety check passed for ${{ github.event.inputs.action }} in DEV environment"

    - name: Terraform Apply
      if: github.event.inputs.action == 'apply' && github.event.inputs.confirm_action == 'yes'
      run: |
        echo "üöÄ Applying Terraform changes..."
        terraform apply -var-file="development.tfvars" -auto-approve
      env:
        ARM_USE_CLI: true

    - name: Terraform Destroy
      if: github.event.inputs.action == 'destroy' && github.event.inputs.confirm_action == 'yes'
      run: |
        echo "üóëÔ∏è Destroying Terraform managed infrastructure..."
        terraform destroy -var-file="development.tfvars" -auto-approve
      env:
        ARM_USE_CLI: true

    - name: Verify Infrastructure State
      if: github.event.inputs.action == 'apply'
      run: |
        echo "üìä Verifying infrastructure state..."
        terraform state list
        
        # Verificar recursos clave seg√∫n tu documentaci√≥n
        echo "üîç Checking key resources:"
        terraform state show azurerm_resource_group.eshop_rg || echo "Resource group not found"
        terraform state show azurerm_kubernetes_cluster.eshop_aks || echo "AKS cluster not found"  
        terraform state show azurerm_container_registry.eshop_acr || echo "ACR not found"
      env:
        ARM_USE_OIDC: true
        ARM_USE_CLI: false
        ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
        ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
        ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

    - name: Post-Apply Notification
      if: always()
      run: |
        echo "üìù Workflow Summary:"
        echo "- Environment: DEVELOPMENT"
        echo "- Action: ${{ github.event.inputs.action }}"
        echo "- Trigger: Manual (workflow_dispatch)"
        echo "- Status: ${{ job.status }}"
        echo ""
        echo "üéØ Pro Tips for DEV environment:"
        echo "- Small Changes: Perfect for testing one change at a time"
        echo "- Safe Testing: DEV is your playground - experiment freely!"
        echo "- Document: Still add comments for what you're testing"
        echo ""
        echo "üéØ Pro Tips from your documentation:"
        echo "- Small Changes: Make one change at a time"
        echo "- Communicate: Use team chat before major changes"
        echo "- Monitor: Check Azure Monitor after changes"
        echo ""
        if [ "${{ job.status }}" == "success" ]; then
          echo "‚úÖ Workflow completed successfully!"
        else
          echo "‚ùå Workflow failed. Check logs above."
          echo "üÜò Emergency Commands:"
          echo "- terraform state list"
          echo "- terraform refresh"
          echo "- Check GitHub Actions logs"
        fi
